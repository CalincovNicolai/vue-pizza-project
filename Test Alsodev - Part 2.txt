Test Alsodev, Part 2:
1. Solution:

function areNumbersConsecutive(arr: number[]): boolean {
    if (arr.length === 0) {
        return false;
    }

    arr.sort((a, b) => a - b);

    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i + 1] - arr[i] !== 1 || arr[i] === arr[i + 1]) {
            return false;
        }
    }

    return true;
}

const arr1: number[] = [5, 2, 3, 1, 4];
const result1: boolean = areNumbersConsecutive(arr1);
console.log(result1);

const arr2: number[] = [34, 23, 52, 12, 3];
const result2: boolean = areNumbersConsecutive(arr2);
console.log(result2);

const arr3: number[] = [7, 6, 5, 5, 3, 4];
const result3: boolean = areNumbersConsecutive(arr3);
console.log(result3);


2. Solution

function uniqueAndSorted(arr: number[]): number[] {
    const uniqueSet = new Set(arr);
    const uniqueArray = Array.from(uniqueSet);
    uniqueArray.sort((a, b) => a - b);
    return uniqueArray;
}

const inputArray1: number[] = [1, 3, 2, 2, 4, 3, 5, 6];
const result1: number[] = uniqueAndSorted(inputArray1);
console.log(result1);

const inputArray2: number[] = [9, 9, 9, 9, 9];
const result2: number[] = uniqueAndSorted(inputArray2);
console.log(result2);

const inputArray3: number[] = [1, 2, 3, 4, 5];
const result3: number[] = uniqueAndSorted(inputArray3);
console.log(result3);

3. Solution

function countOccurrences(arr: number[]): { [key: number]: number }[] {
    const result: { [key: number]: number }[] = [];

    for (const num of arr) {
        const existingEntry = result.find(entry => entry[num] !== undefined);
        if (existingEntry) {
            existingEntry[num]++;
        } else {
            const newObj: { [key: number]: number } = {};
            newObj[num] = 1;
            result.push(newObj);
        }
    }

    return result;
}

const inputArray: number[] = [1, 3, 2, 2, 4, 3, 5, 6, 5];
const result: { [key: number]: number }[] = countOccurrences(inputArray);
console.log(result);

